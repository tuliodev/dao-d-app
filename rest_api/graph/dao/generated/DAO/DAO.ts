// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ProposalCancelled extends ethereum.Event {
  get params(): ProposalCancelled__Params {
    return new ProposalCancelled__Params(this);
  }
}

export class ProposalCancelled__Params {
  _event: ProposalCancelled;

  constructor(event: ProposalCancelled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get targetContracts(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get targetsLength(): Array<string> {
    return this._event.parameters[4].value.toStringArray();
  }

  get calldatas(): Array<Bytes> {
    return this._event.parameters[5].value.toBytesArray();
  }

  get startBlock(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get title(): string {
    return this._event.parameters[8].value.toString();
  }

  get description(): string {
    return this._event.parameters[9].value.toString();
  }

  get minimumVotes(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get votingDuration(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }
}

export class ProposalExecuted extends ethereum.Event {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Voted extends ethereum.Event {
  get params(): Voted__Params {
    return new Voted__Params(this);
  }
}

export class Voted__Params {
  _event: Voted;

  constructor(event: Voted) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get Voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get support(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class DAO___proposalVotesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAgainVotes(): BigInt {
    return this.value0;
  }

  getForVotes(): BigInt {
    return this.value1;
  }
}

export class DAO___proposalsResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: boolean;
  value4: BigInt;
  value5: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: boolean,
    value4: BigInt,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }

  getVoteStart(): BigInt {
    return this.value0;
  }

  getVoteEnd(): BigInt {
    return this.value1;
  }

  getExecuted(): boolean {
    return this.value2;
  }

  getCancelled(): boolean {
    return this.value3;
  }

  getMinimumVotes(): BigInt {
    return this.value4;
  }

  getProposalState(): i32 {
    return this.value5;
  }
}

export class DAO extends ethereum.SmartContract {
  static bind(address: Address): DAO {
    return new DAO("DAO", address);
  }

  DaoToken(): Address {
    let result = super.call("DaoToken", "DaoToken():(address)", []);

    return result[0].toAddress();
  }

  try_DaoToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("DaoToken", "DaoToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _proposalVotes(param0: BigInt): DAO___proposalVotesResult {
    let result = super.call(
      "_proposalVotes",
      "_proposalVotes(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DAO___proposalVotesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try__proposalVotes(
    param0: BigInt
  ): ethereum.CallResult<DAO___proposalVotesResult> {
    let result = super.tryCall(
      "_proposalVotes",
      "_proposalVotes(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DAO___proposalVotesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  _proposals(param0: BigInt): DAO___proposalsResult {
    let result = super.call(
      "_proposals",
      "_proposals(uint256):(uint256,uint256,bool,bool,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DAO___proposalsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toI32()
    );
  }

  try__proposals(param0: BigInt): ethereum.CallResult<DAO___proposalsResult> {
    let result = super.tryCall(
      "_proposals",
      "_proposals(uint256):(uint256,uint256,bool,bool,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DAO___proposalsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toI32()
      )
    );
  }

  execute(
    proposalId: BigInt,
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    titleHash: Bytes,
    descriptionHash: Bytes,
    minimumVotes: BigInt,
    votingDuration: BigInt
  ): boolean {
    let result = super.call(
      "execute",
      "execute(uint256,address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(titleHash),
        ethereum.Value.fromFixedBytes(descriptionHash),
        ethereum.Value.fromUnsignedBigInt(minimumVotes),
        ethereum.Value.fromUnsignedBigInt(votingDuration)
      ]
    );

    return result[0].toBoolean();
  }

  try_execute(
    proposalId: BigInt,
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    titleHash: Bytes,
    descriptionHash: Bytes,
    minimumVotes: BigInt,
    votingDuration: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "execute",
      "execute(uint256,address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(titleHash),
        ethereum.Value.fromFixedBytes(descriptionHash),
        ethereum.Value.fromUnsignedBigInt(minimumVotes),
        ethereum.Value.fromUnsignedBigInt(votingDuration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasVoted(proposalId: BigInt, voter: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromAddress(voter)
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(
    proposalId: BigInt,
    voter: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromAddress(voter)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashProposal(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes,
    titleHash: Bytes,
    minimumVotes: BigInt,
    votingDuration: BigInt
  ): BigInt {
    let result = super.call(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash),
        ethereum.Value.fromFixedBytes(titleHash),
        ethereum.Value.fromUnsignedBigInt(minimumVotes),
        ethereum.Value.fromUnsignedBigInt(votingDuration)
      ]
    );

    return result[0].toBigInt();
  }

  try_hashProposal(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes,
    titleHash: Bytes,
    minimumVotes: BigInt,
    votingDuration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash),
        ethereum.Value.fromFixedBytes(titleHash),
        ethereum.Value.fromUnsignedBigInt(minimumVotes),
        ethereum.Value.fromUnsignedBigInt(votingDuration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numProposals(): BigInt {
    let result = super.call("numProposals", "numProposals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numProposals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numProposals", "numProposals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  propose(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    title: string,
    description: string,
    minimumVotes: BigInt,
    votingDuration: BigInt
  ): BigInt {
    let result = super.call(
      "propose",
      "propose(address[],uint256[],bytes[],string,string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromString(title),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(minimumVotes),
        ethereum.Value.fromUnsignedBigInt(votingDuration)
      ]
    );

    return result[0].toBigInt();
  }

  try_propose(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    title: string,
    description: string,
    minimumVotes: BigInt,
    votingDuration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "propose",
      "propose(address[],uint256[],bytes[],string,string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromString(title),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(minimumVotes),
        ethereum.Value.fromUnsignedBigInt(votingDuration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(proposalId: BigInt): i32 {
    let result = super.call("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toI32();
  }

  try_state(proposalId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _DaoToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get targets(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get titleHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get descriptionHash(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get minimumVotes(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get votingDuration(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get execution(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ProposeCall extends ethereum.Call {
  get inputs(): ProposeCall__Inputs {
    return new ProposeCall__Inputs(this);
  }

  get outputs(): ProposeCall__Outputs {
    return new ProposeCall__Outputs(this);
  }
}

export class ProposeCall__Inputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get title(): string {
    return this._call.inputValues[3].value.toString();
  }

  get description(): string {
    return this._call.inputValues[4].value.toString();
  }

  get minimumVotes(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get votingDuration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ProposeCall__Outputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}
